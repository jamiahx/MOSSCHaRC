Pre-Alpha

3 Variable Interface:
	Scalable Parallel Size:
		Twice the wires=One full PARALLEL SIZE (PS) bigger:
		PS0=1 Wire, PS1=2w, PS1.5=3w, PS2=4w, PS2.25=5w, etc.
	Scalable Serial Size:
		Twice the speed (in Hz)=One full SERIAL SIZE (SS) Bigger:
		SS0=Fundamental Frequency (TBD), SS1=2x, SS1.5=3x, SS2=4w, SS2.25=5w, etc.
	Scalable Number-Prefix Size:
		Half the wire Interval (with a base2-base10 adjustment)=Half the NUMBER-PREFIX SIZE (NPS);
		1/1000 the wire interval=1/10 the NPS=One full NPS smaller:
		NPS4mini~16mm, NPS3mini~8mm NPS2mini~4mm, NPS1mini~2mm, NPS0mini=NPS10micro=1mm, NPS9micro=0.5mm~512Âµm

Daul Modularity System: main module system uses fungible modules, secondary/per-module system uses classicly modular parts

Full module can range from a complete computer (SoC or Full Motherboard) to a fungible part of a computer (CPU, GPU, memory, storage, Comms chip)

For now, MOSSCHaRC will leave submodule arrangement up to the module Manufacturer

For now, MOSSCHaRC will not use dynamic interfaces, they will be programed manually by ICSP or something

MOSSCHaRC will use/be able to use a "Smart Grid" system: Multiple and localized power sources, Dynamic routing, etc.

A module has two non-volatile configuration caches for each wire, one for the transmitting configuration and one for the recieving configuration. When configured properly, the TX Config Cache of Module A will match the RX Config Cache of Module B and vice-versa. 
#Figure out how to use with a bus

Module Interface Initialization Session:
	When powered off, the Wires default to ground
	Each Wire is assumed to be connected to multiple modules through a bus and to different modules than the other Wires until configured differently
	Any wires that transmitted power (that wasn't noise or static electricity) to Module A at any time while Module A was powering up are considered Wires that Module A powered up from
	Module A will recieve (square-wave?) AC current from already powered up modules or power source modules turned on, charge an onboard capacitor or something, and then start up the Interfaces
	Once Module A is powered up
		On the Wires that Module A powered up from, send "Oh, Hai" signal
			If/when a reply "Oh, Hai" signal is recieved, then register that there is at least one (more) module on the other side of the wire; Until then, assume each Wire is connected to a dumb power source (like a wall outlet)
		On the Wires that Module A didn't power up from
			Pass on the AC Current recieved at the mean timing offset
			If nothing is detected at one of the wires after foo seconds, turn off
			

(account for simultaneous power-up)
	Transmit the configuration for each wire at Standard Frequency at the respective wire
	IF the Hash recieved 

If Module Hotplugging is enabled in the Kernel...

Jargon/Made-Up-Words:
WP-WP Connection - A connection across two WPs; can be any form of connection: electrical, quantum, bioanolog, optical, etc.
WP-Bus Connection - A connection across a WP and a Physical Bus and thus, indirectly, across one or more other WPs; (make all connections WP-Bus?)
WirePort (WP) - Half of a WireConnection; A contact and the hardware that is able to transmit and information
Chipbridge - any chip or wires that provide the interfaces for two or more components within a module (think Northbridge/Southbridge)
Module Interface - The chip(s) and physical port that provide the interface for two or more modules
Fungible: each unit is a self-sufficient (albeit possibly specialized) computer
Classicly Modular: each unit is only a part of a computer
